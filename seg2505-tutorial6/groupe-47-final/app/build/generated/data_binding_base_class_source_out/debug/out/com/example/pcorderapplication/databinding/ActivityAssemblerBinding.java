// Generated by view binder compiler. Do not edit!
package com.example.pcorderapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.pcorderapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAssemblerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button acceptOrderButton;

  @NonNull
  public final TableLayout buttonGroupLayout;

  @NonNull
  public final CardView cardOrderId;

  @NonNull
  public final Button completeOrderButton;

  @NonNull
  public final EditText editTextDescription;

  @NonNull
  public final EditText editTextMessage;

  @NonNull
  public final EditText editTextRequesterId;

  @NonNull
  public final EditText editTextStatus;

  @NonNull
  public final ImageView goBackArrow;

  @NonNull
  public final View headerView;

  @NonNull
  public final RecyclerView ordersRecyclerView;

  @NonNull
  public final Button rejectOrderButton;

  @NonNull
  public final EditText searchOrderIdEditText;

  @NonNull
  public final TextView titleTextView;

  @NonNull
  public final Button updateOrderButton;

  @NonNull
  public final Button validateOrderButton;

  @NonNull
  public final Button viewAllOrdersButton;

  @NonNull
  public final Button viewStatisticsButton;

  private ActivityAssemblerBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button acceptOrderButton, @NonNull TableLayout buttonGroupLayout,
      @NonNull CardView cardOrderId, @NonNull Button completeOrderButton,
      @NonNull EditText editTextDescription, @NonNull EditText editTextMessage,
      @NonNull EditText editTextRequesterId, @NonNull EditText editTextStatus,
      @NonNull ImageView goBackArrow, @NonNull View headerView,
      @NonNull RecyclerView ordersRecyclerView, @NonNull Button rejectOrderButton,
      @NonNull EditText searchOrderIdEditText, @NonNull TextView titleTextView,
      @NonNull Button updateOrderButton, @NonNull Button validateOrderButton,
      @NonNull Button viewAllOrdersButton, @NonNull Button viewStatisticsButton) {
    this.rootView = rootView;
    this.acceptOrderButton = acceptOrderButton;
    this.buttonGroupLayout = buttonGroupLayout;
    this.cardOrderId = cardOrderId;
    this.completeOrderButton = completeOrderButton;
    this.editTextDescription = editTextDescription;
    this.editTextMessage = editTextMessage;
    this.editTextRequesterId = editTextRequesterId;
    this.editTextStatus = editTextStatus;
    this.goBackArrow = goBackArrow;
    this.headerView = headerView;
    this.ordersRecyclerView = ordersRecyclerView;
    this.rejectOrderButton = rejectOrderButton;
    this.searchOrderIdEditText = searchOrderIdEditText;
    this.titleTextView = titleTextView;
    this.updateOrderButton = updateOrderButton;
    this.validateOrderButton = validateOrderButton;
    this.viewAllOrdersButton = viewAllOrdersButton;
    this.viewStatisticsButton = viewStatisticsButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAssemblerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAssemblerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_assembler, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAssemblerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.acceptOrderButton;
      Button acceptOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (acceptOrderButton == null) {
        break missingId;
      }

      id = R.id.buttonGroupLayout;
      TableLayout buttonGroupLayout = ViewBindings.findChildViewById(rootView, id);
      if (buttonGroupLayout == null) {
        break missingId;
      }

      id = R.id.cardOrderId;
      CardView cardOrderId = ViewBindings.findChildViewById(rootView, id);
      if (cardOrderId == null) {
        break missingId;
      }

      id = R.id.completeOrderButton;
      Button completeOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (completeOrderButton == null) {
        break missingId;
      }

      id = R.id.editTextDescription;
      EditText editTextDescription = ViewBindings.findChildViewById(rootView, id);
      if (editTextDescription == null) {
        break missingId;
      }

      id = R.id.editTextMessage;
      EditText editTextMessage = ViewBindings.findChildViewById(rootView, id);
      if (editTextMessage == null) {
        break missingId;
      }

      id = R.id.editTextRequesterId;
      EditText editTextRequesterId = ViewBindings.findChildViewById(rootView, id);
      if (editTextRequesterId == null) {
        break missingId;
      }

      id = R.id.editTextStatus;
      EditText editTextStatus = ViewBindings.findChildViewById(rootView, id);
      if (editTextStatus == null) {
        break missingId;
      }

      id = R.id.goBackArrow;
      ImageView goBackArrow = ViewBindings.findChildViewById(rootView, id);
      if (goBackArrow == null) {
        break missingId;
      }

      id = R.id.headerView;
      View headerView = ViewBindings.findChildViewById(rootView, id);
      if (headerView == null) {
        break missingId;
      }

      id = R.id.ordersRecyclerView;
      RecyclerView ordersRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (ordersRecyclerView == null) {
        break missingId;
      }

      id = R.id.rejectOrderButton;
      Button rejectOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (rejectOrderButton == null) {
        break missingId;
      }

      id = R.id.searchOrderIdEditText;
      EditText searchOrderIdEditText = ViewBindings.findChildViewById(rootView, id);
      if (searchOrderIdEditText == null) {
        break missingId;
      }

      id = R.id.titleTextView;
      TextView titleTextView = ViewBindings.findChildViewById(rootView, id);
      if (titleTextView == null) {
        break missingId;
      }

      id = R.id.updateOrderButton;
      Button updateOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (updateOrderButton == null) {
        break missingId;
      }

      id = R.id.validateOrderButton;
      Button validateOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (validateOrderButton == null) {
        break missingId;
      }

      id = R.id.viewAllOrdersButton;
      Button viewAllOrdersButton = ViewBindings.findChildViewById(rootView, id);
      if (viewAllOrdersButton == null) {
        break missingId;
      }

      id = R.id.viewStatisticsButton;
      Button viewStatisticsButton = ViewBindings.findChildViewById(rootView, id);
      if (viewStatisticsButton == null) {
        break missingId;
      }

      return new ActivityAssemblerBinding((ConstraintLayout) rootView, acceptOrderButton,
          buttonGroupLayout, cardOrderId, completeOrderButton, editTextDescription, editTextMessage,
          editTextRequesterId, editTextStatus, goBackArrow, headerView, ordersRecyclerView,
          rejectOrderButton, searchOrderIdEditText, titleTextView, updateOrderButton,
          validateOrderButton, viewAllOrdersButton, viewStatisticsButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
